from cmu_graphics import *
import math, time, random
from PIL import Image

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# Citations for images
# https://unsplash.com/photos/c9OCWLka764

# https://unsplash.com/photos/uC21aXJ7yQs

# https://unsplash.com/photos/f8cdJZwI3oI

# https://unsplash.com/photos/t7EL2iG3jMc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? CUSTOM CLASSES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


class lander:
    def __init__(self, x, y, vx, vy, ax, ay,
                 angle, visible, fuel, points, score):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.ax = ax
        self.ay = ay
        self.angle = angle
        self.visible = visible
        self.fuel = fuel
        self.points = points
        self.score = score


class planet:
    def __init__(self, points):
        self.points = points


class moon(planet):
    def __init__(self, points):
        super().__init__(points)
        self.gravity = 1.2
        self.color = gradient('gray', 'darkGray', 'white', 'gray')


class venus(planet):
    def __init__(self, points):
        super().__init__(points)
        self.gravity = 4.8
        self.color = gradient('orange', 'yellow', 'brown')


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# GAME CONSTANTS AND RESET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def game_onAppStart(app):
    app.name = ""
    resetGame(app)


def resetGame(app):
    app.stepsPerSecond = 60
    app.timeLast = None
    app.stepsPerSecond = 40
    app.timeLast = None
    app.timeNow = 0
    app.width = 1500
    app.height = 800
    app.thrustOn = False

    app.stopMoving = False
    app.explodeShip = False
    app.r = 1
    app.endingCounter = 0
    app.thrustVariationCounter = 0
    app.gameBack = Image.open('gameBack.jpg')
    app.gameBack = app.gameBack.resize((1500, 800))
    app.gameBack = CMUImage(app.gameBack)

    app.points = [0, -15, 10, -10, 12.5, 0, 10, 6, 12.5, 12.5, 10, 12.5, 9,
                  8, 5, 8, 7.5, 12.5, -7.5, 12.5, -5, 8, -9, 8, -10, 12.5,
                  -12.5, 12.5, -10, 6, -12.5, 0, -10, -10]
    app.renderPoints = [0] * len(app.points)

    app.flamePoints1 = [7.5, 12.5, 0, 30, -7.5, 12.5]
    app.flamePoints2 = [7.5, 12.5, 0, 22, -7.5, 12.5]

    app.renderFlame1 = [0] * len(app.flamePoints1)
    app.renderFlame2 = [0] * len(app.flamePoints2)

    loadNewLander(app)
    loadNewPlanet(app)
    app.gravityCurrent = app.planet.gravity

    app.now = 0
    app.continueGame = False
    app.baseAngle = 0
    app.rotateRate = 0
    app.rotationStartTime = 0
    app.frameCount = 0
    app.fps = 0
    app.explosionVisible = True

    app.gameOver = False


# make new instances of a lander and hardcoded planet for now
def loadNewLander(app):
    # x, y, vx, vy, ax, ay, angle, visible, fuel, points, score
    app.player = lander(150, 10, 100, 0, 0, 0, 0, True, 1000, 0, 0)


def loadNewPlanet(app):
    planetPoints = generatePlanet(app)
    # points, gravity constant
    app.planet = moon(planetPoints)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? GAME TIME PASSING AND PLAYER INPUTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def game_onStep(app):
    if app.gameOver:
        return
    app.now = time.time()

    # tracking time for use in physics equations, delta T
    if app.timeLast is None:
        app.timeLast = app.now
        app.timeLastFrame = app.now
        return
    app.deltaTime = (app.now - app.timeLast)

    if app.stopMoving:
        app.player.vx = 0
        app.player.ax = 0
        app.player.vy = 0
        app.player.ay = 0
        if app.explodeShip and app.r < 90:
            app.r += 5
        if app.r > 90 and app.explodeShip:
            # resetGame(app)
            # setActiveScreen('menu')
            app.explodeShip = False
            app.explosionVisible = False
            app.r = 1
    else:
        # Position update
        # ! update the velocities and acc
        app.player.vy += app.player.ay
        app.player.vx += app.player.ax

        prevX = app.player.x
        prevY = app.player.y

        app.player.y = .5 * app.player.ay * app.deltaTime ** 2 + \
                       app.player.vy * app.deltaTime + app.player.y
        app.player.x = .5 * app.player.ax * app.deltaTime ** 2 + \
                       app.player.vx * app.deltaTime + app.player.x

        # rotation

        if app.rotateRate != 0:
            app.player.angle = ((app.now - app.rotationStartTime)
                                * app.rotateRate + app.baseAngle)

        sin1 = math.sin(app.player.angle)
        cos1 = math.cos(app.player.angle)

        # These equations rotate the points of the lander and
        # Flame around 0,0 and then translates that rotated object to
        # the app.player.x/y that is calculated using the physics
        for i in range(0, len(app.points), 2):
            app.renderPoints[i] = (app.player.x + app.points[i]
                                   * cos1 - app.points[i + 1] * sin1)
            app.renderPoints[i + 1] = (app.player.y +
                                       app.points[i + 1] * cos1 + app.points[
                                           i] * sin1)
        for i in range(0, len(app.flamePoints1), 2):
            app.renderFlame1[i] = (
                    app.player.x + app.flamePoints1[i] * cos1
                    - app.flamePoints1[i + 1] * sin1
            )
            app.renderFlame1[i + 1] = (
                    app.player.y + app.flamePoints1[i + 1] * cos1 +
                    app.flamePoints1[i] * sin1
            )

        for i in range(0, len(app.flamePoints2), 2):
            app.renderFlame2[i] = (
                    app.player.x + app.flamePoints2[i] * cos1 -
                    app.flamePoints2[i + 1] * sin1
            )
            app.renderFlame2[i + 1] = (
                    app.player.y + app.flamePoints2[i + 1] * cos1 +
                    app.flamePoints2[i] * sin1
            )

        # if the thrust is off only gravity applies
        if not app.thrustOn:
            app.player.ay = app.gravityCurrent
            app.player.ax = 0

        if app.thrustOn and app.player.fuel >= 0:
            app.thrustVariationCounter += 1
            app.player.fuel -= 1
            app.player.ay = app.gravityCurrent + 3 * math.sin(
                app.player.angle - (math.pi / 2))
            app.player.ax = 1.5 * math.cos(app.player.angle - (math.pi / 2))

        # check if fuel is empty and keep it from going negative
        if app.player.fuel <= 0:
            app.player.fuel = 0

    if app.stopMoving and app.gameOver:
        if app.explodeShip:
            app.leaderBoardList.append((app.player.score, app.name))
            app.leaderBoardList = sorted(app.leaderBoardList)
            app.leaderBoardList = app.leaderBoardList[::-1]

    # Collisions
    if checkGroundCollisions(app):
        app.stopMoving = True
        if checkLanding(app):
            app.explodeShip = True
            app.player.visible = False

    deltaFrame = app.now - app.timeLastFrame

    if deltaFrame > 1:
        app.fps = int(app.frameCount / deltaFrame)
        app.frameCount = 0
        app.timeLastFrame = app.now

    app.timeLast = app.now
    app.frameCount += 1


def game_redrawAll(app):
    drawImage(app.gameBack, 0, 0)
    drawLabel(f"fps: {app.fps}", 100, 100, fill='white')

    if app.gameOver:
        drawLabel(
            "You Crashed!", app.width // 2,
                            app.height // 2, fill='orange', size=30
        )
        drawLabel(
            f'Score: {app.player.score}',
            app.width // 2, app.height // 2 + 50,
            fill='lightGray', size=20, bold=True)
        drawLabel(
            "Press M to return to Menu", app.width // 2,
                                         app.height // 2 + 100, fill='orange',
            size=30
        )

    if app.explodeShip:
        x, y = app.player.x, app.player.y
        drawStar(
            x, y, app.r, 5, rotateAngle=0,
            fill=gradient('yellow', 'orange', 'red'),
            visible=app.explosionVisible
        )
        drawStar(
            x, y, app.r, 5, rotateAngle=45,
            fill=gradient('yellow', 'orange', 'red'),
            visible=app.explosionVisible
        )
        drawStar(
            x, y, app.r, 5, rotateAngle=90,
            fill=gradient('yellow', 'orange', 'red'),
            visible=app.explosionVisible
        )
        drawStar(
            x, y, app.r, 5, rotateAngle=135,
            fill=gradient('yellow', 'orange', 'red'),
            visible=app.explosionVisible
        )
    else:
        drawPolygon(
            *app.renderPoints, fill=None,
            border='white', visible=app.player.visible
        )
        if app.thrustOn and not app.player.fuel <= 0:
            if app.thrustVariationCounter % 2 == 0:
                drawPolygon(
                    *app.renderFlame1,
                    fill=gradient('red', 'red', 'orange')
                )
            else:
                drawPolygon(
                    *app.renderFlame2,
                    fill=gradient('orange', 'orange', 'red')
                )
    # draw current planet surface
    drawPlanet(app)

    # labels for displaying information
    drawLabel(
        f'Horizontal Velocity: {int(app.player.vx // 10)}',
        1300, 50, fill='white', font='monospace', size=15, bold=True
    )
    drawLabel(
        f'Vertical Velocity: {int(app.player.vy // 10)}', 1300, 70,
        fill='white', font='monospace', size=15, bold=True
    )
    drawLabel(
        f'Angle: {int((app.player.angle * 180 / math.pi) % 360)}',
        1300, 90, fill='white', font='monospace', size=15, bold=True
    )
    drawLabel(
        f'Fuel: {app.player.fuel}', 50, 20,
        fill='white', font='monospace', size=15, bold=True
    )
    drawLabel(
        f'Points: {app.player.score}', 50, 40,
        fill='white', font='monospace', size=15, bold=True
    )


def drawPlanet(app):
    points = app.planet.points
    drawPolygon(*points, border='white',
                fill=app.planet.color)


""""""""""""""""""""""""""""""""""""""""""""""""""""""
# PLAYER INPUT
""""""""""""""""""""""""""""""""""""""""""""""""""""""


def game_onKeyPress(app, key):
    if key == 'space' and app.player.fuel > 0:
        app.thrustOn = True
    if app.stopMoving and not app.explodeShip and key == 'c':
        app.player.score += 10
        time.sleep(.5)
        app.player.x = 10
        app.player.vx = 100
        app.player.y = 10
        app.stopMoving = False
    if app.stopMoving and app.explodeShip and key == 'c':
        app.player.x = 10
        app.player.vx = 100
        app.player.y = 10
        app.stopMoving = False
    if key == 'r':
        resetGame(app)
    if key == 'm' or key == 'M':
        setActiveScreen('menu')
        resetGame(app)
    if key == 'right':
        app.rotateRate = 5
        app.rotationStartTime = time.time()
    if key == 'left':
        app.rotateRate = -5
        app.rotationStartTime = time.time()
    if key == 'h':
        app.gameOver = not app.gameOver
    if key == 'l':
        app.gravityCurrent = 100
    if key == 'o':
        app.planet.gravity = 0
        app.gravityCurrent = 0
        app.player.ax = 0
        app.player.ay = 0
        app.player.vx = 0
        app.player.vy = 0


def game_onKeyRelease(app, key):
    if key == 'space':
        app.thrustOn = False
    if key == 'right':
        app.rotateRate = 0
        app.baseAngle = app.player.angle
    if key == 'left':
        app.rotateRate = 0
        app.baseAngle = app.player.angle


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? COLLISION AND LANDING DETECTION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def checkGroundCollisions(app):
    planetPoints = app.planet.points
    for shipPoint in range(1, len(app.renderPoints), 2):
        for index in range(3, len(planetPoints), 2):
            slope = (getSlope(
                planetPoints[index - 3], planetPoints[index - 2],
                planetPoints[index - 1], planetPoints[index]))
            belowY = (
                    slope * (app.renderPoints[shipPoint - 1] - planetPoints[
                index - 3]) +
                    planetPoints[index - 2])

            if (
                    planetPoints[index - 3] <= app.renderPoints[
                shipPoint - 1] <=
                    planetPoints[index - 1] and
                    app.renderPoints[shipPoint] >= belowY
            ):
                return True
    return False

    # for i in range(1, len(app.renderPoints), 2):
    #     for index in range(5, len(planetPoints), 2):
    #
    #         polygonTri = makePointsIntoTriangle(
    #             app, planetPoints[index - 5], planetPoints[index - 4],
    #             planetPoints[index - 3], planetPoints[index - 2])
    #
    #         polygonTri2 = makePointsIntoTriangle(
    #             app, planetPoints[index - 3], planetPoints[index - 2],
    #             planetPoints[index - 1], planetPoints[index])
    #
    #         if (ContainPoint(app.renderPoints[i - 1],
    #                          app.renderPoints[i], polygonTri)
    #                 or ContainPoint(app.renderPoints[i - 1],
    #                                 app.renderPoints[i], polygonTri2)):
    #
    #             return True
    # return False


def ContainPoint(x, y, points):
    x1, y1, x2, y2, x3, y3 = points

    triOriginal = triangleArea(x1, y1, x2, y2, x3, y3)
    triA = triangleArea(x, y, x1, y1, x2, y2)
    triB = triangleArea(x, y, x2, y2, x3, y3)
    triC = triangleArea(x, y, x3, y3, x1, y1)

    return almostEqual(triOriginal, triA + triB + triC)


def checkLanding(app):
    if 330 >= (app.player.angle * 180 / math.pi) % 360 >= 30:
        return True
    if ((abs(int(app.player.vx // 10)) >= 4) or
            (abs(int(app.player.vy // 10)) >= 10)):
        return True
    else:
        return False


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? HELPER FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def getSlope(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1)
    return slope


def distance(x1, y1, x2, y2):
    return ((y2 - y1) ** 2 + (x2 - x1) ** 2) ** .5


# ? form of herons formula, find area of triangle with only side lengths
def triangleArea(x1, y1, x2, y2, x3, y3):
    return abs((x1 * (y2 - y3) + x2 * (y3 - y1)
                + x3 * (y1 - y2))) / 2


def makePointsIntoTriangle(app, x1, y1, x2, y2):
    x3 = (x1 + x2) / 2
    y3 = app.height
    return x1, y1, x2, y2, x3, y3


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? MAP GENERATOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def generatePlanet(app):
    listFlats = []
    numPoints = random.randint(10, 50)
    xValues = []
    yValues = []
    points = []
    randIndex = 0
    for i in range(numPoints):
        posX = random.randint(10, 1490)
        if len(xValues) > 1:
            xValues.sort()
            while abs(posX - xValues[randIndex - 1]) <= 40:
                xValues.sort()
                posX = random.randint(10, 1480)
        xValues.append(posX)
        yValues.append(random.randint(450, 700))
    xValues.sort()

    app.numFlatSpots = random.randint(3, 8)

    for i in range(app.numFlatSpots):
        index = 0
        while index == 0 or index == len(xValues) - 1:
            flatStart = random.choice(xValues)
            index = xValues.index(flatStart)

        yValues[index - 1] = yValues[index + 1]

        listFlats.append(
            (xValues[i], yValues[i], xValues[i - 1], yValues[i - 1]))

    for i in range(len(xValues)):
        points.append(xValues[i])
        points.append(yValues[i])

    points = cleanPoints(app, points)

    points = [x for x in points if x != 0]
    points.insert(0, 800)
    points.insert(0, 0)
    points.append(1500)
    points.append(800)
    return points


# ! check if x values are too sharp (too close together)
# ! and corrects them if necessary
def cleanPoints(app, points):
    for i in range(3, len(points) + 1, 2):
        if points[i - 1] - points[i - 3] <= 25:
            points[i - 1] = 0
            points[i] = 0
    return points


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? MENU CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def menu_redrawAll(app):
    drawImage(app.back, 0, 0)
    drawRect(app.width // 2, app.height // 2 + 200,
             300, 100, fill='grey', opacity=50, align='center',
             border='cyan')
    drawLabel("Press Space", app.width // 2, app.height // 2 + 200,
              bold=True, size=35, font='monospace', fill='cyan')
    drawLabel("Solar Lander", app.width // 2, app.height // 2 - 200,
              size=100, font='monospace', bold=True, fill='cyan')

    drawRect(1350, 750, 200, 50, align='center', fill='gray',
             opacity=50, border='cyan')
    drawLabel("Press L for Leaderboard", 1350, 750, fill='cyan', size=15)


def menu_onKeyPress(app, key):
    if 'space' == key:
        setActiveScreen('nameScreen')
    if 'l' == key or 'L' == key:
        setActiveScreen('leaderboard')


def menu_onAppStart(app):
    app.back = Image.open('spaceMenu.jpg')
    app.back = app.back.resize((1500, 800))
    app.back = CMUImage(app.back)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? LEADERBOARD CODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def leaderboard_onAppStart(app):
    app.leaderBoardList = [(10, 'QUINCY')]
    app.backLeader = Image.open('SpaceLeaderboard.jpg')
    app.backLeader = app.backLeader.resize((1500, 800))
    app.backLeader = CMUImage(app.backLeader)
    app.displayBoard = ''


def leaderboard_redrawAll(app):
    drawImage(app.backLeader, 0, 0)
    drawRect(app.width // 2, 400, 400, 600, align='center', opacity=50)

    drawRect(150, 750, 200, 50, align='center',
             fill='gray', opacity=50, border='cyan')
    drawLabel("Press M for Menu", 150, 750, fill='cyan', size=15)
    drawLabel("Leaderboard", app.width // 2, 50, align='center',
              fill='white', bold=True, font='monospace', size=60)
    if len(app.leaderBoardList) > 15:
        for countNames in range(15):
            drawLabel(f'{app.leaderBoardList[countNames][1]}:' +
                      f'{app.leaderBoardList[countNames][0]}',
                      app.width // 2, 120 + 40 * countNames, size=40,
                      fill='white', font='monospace', align='center')
    else:
        for countNames in range(len(app.leaderBoardList)):
            drawLabel(f'{app.leaderBoardList[countNames][1]}:' +
                      f'{app.leaderBoardList[countNames][0]}',
                      app.width // 2, 120 + 40 * countNames, size=40,
                      fill='white', font='monospace', align='center')


def leaderboard_onKeyPress(app, key):
    if key == 'm' or key == 'M':
        setActiveScreen('menu')


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
# ? ENTER NAME SCREEN
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def nameScreen_onAppStart(app):
    app.nameMessage = ''
    app.nameMenuBack = Image.open('nameMenu.jpg')
    app.nameMenuBack = app.nameMenuBack.resize((1500, 800))
    app.nameMenuBack = CMUImage(app.nameMenuBack)


def nameScreen_redrawAll(app):
    drawImage(app.nameMenuBack, 0, 0)
    drawLabel("Type Name, Then Press Enter To Start",
              app.width // 2, 200, size=40,
              align='center', fill='cyan', font='monospace')
    drawLabel(f'{app.nameMessage}', app.width // 2, app.height // 2,
              align='center', fill='cyan', size=30, font='monospace')


def nameScreen_onKeyPress(app, key):
    if (key.isalpha() and not key == 'space' and len(app.nameMessage) < 7 and
            not key == 'backspace' and not key == 'enter'):
        app.nameMessage += key.upper()
    if key == 'backspace':
        app.nameMessage = app.nameMessage[:len(app.nameMessage) - 1]
    if key == 'enter':
        app.name = app.nameMessage
        setActiveScreen('game')
        app.nameMessage = ''


def main():
    runAppWithScreens(initialScreen='menu')


if __name__ == '__main__':
    main()
