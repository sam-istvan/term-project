from cmu_graphics import *
import math, copy, time

#! class of spaceship
class lander:
    def __init__(self, x, y, vx, vy, ax, ay, angle, visible):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.ax = ax
        self.ay = ay
        self.angle = angle
        self.visible = visible

def onAppStart(app):
    resetGame(app)

def resetGame(app):
    app.stepsPerSecond = 60
    app.timeLast = None
    app.timeNow = 0
    app.width = 1500
    app.height = 800
    app.thrustOn = False
    app.background = gradient('black', 'black', 'darkSlateGray', start='top')
    app.gravityCurrent = 4
    app.stopMoving = False
    app.exlodeShip = False
    loadNewLander(app)


#! make new insatnces of a lander
def loadNewLander(app):
    app.player = lander(100, 10, 0, 0, 0, 0, 270, True)

#! time last and time now check delta 
def onStep(app):
    if app.stopMoving:
        app.exlodeShip = True
        app.player.vx = 0
        app.player.ax = 0
        app.player.vy = 0
        app.player.ay = 0
    else: 
        
        #! track lander points and check if any touch surface
        app.landerPoints  = [[app.player.x, app.player.y], [app.player.x + 20, 
                            app.player.y + 10], [app.player.x + 25, app.player.y + 30], 
                            [app.player.x + 20, app.player.y + 40], [app.player.x + 25, 
                            app.player.y + 50], [app.player.x + 20, app.player.y + 50], 
                            [app.player.x + 15, app.player.y + 40], [app.player.x + 5, 
                            app.player.y + 40], [app.player.x + 10, app.player.y + 50], 
                            [app.player.x - 10, app.player.y + 50], [app.player.x - 5, 
                            app.player.y + 40], [app.player.x - 15, app.player.y + 40], 
                            [app.player.x - 20, app.player.y + 50], [app.player.x - 25, 
                            app.player.y + 50], [app.player.x - 20, app.player.y + 40], 
                            [app.player.x - 25, app.player.y + 30], [app.player.x - 20, 
                            app.player.y + 10]]
        checkGroundCollisions(app)

        #! begin tracking time for use in physics equations, delta T
        if app.timeLast == None:
            app.timeLast = time.time() 
        
        app.timeNow = time.time() 
        app.deltaTime = (app.timeNow - app.timeLast)
        
        #! if the thrust is off only gravity applies
        if not app.thrustOn:
            app.player.ay = app.gravityCurrent
            app.player.ax = 0

        #! while thrust on split acc into x and y components 
        if app.thrustOn:
            app.player.ay = 3 * math.sin(app.player.angle * math.pi / 180) + 1
            app.player.ax = 3 * math.cos(app.player.angle * math.pi / 180)

        #! check if the lander is in the screen, possibly loop
        if (app.player.y >= app.height - 50): #! HARDCODED FIX THIS
            app.player.y = app.height - 50 #! HARDCODED FIX THIS
            app.player.vy = 0
        if (app.player.x >= app.width):
            app.player.x = 5
        if (app.player.x <= 0):
            app.player.x = app.width - 5
        
        
        
        #! update the velocities and acc
        app.player.vy += app.player.ay
        app.player.vx += app.player.ax
        
        app.player.y = .5 * (app.player.ay) * (app.deltaTime)**2 + \
            app.player.vy * app.deltaTime + app.player.y
        app.player.x = .5 * (app.player.ax) * (app.deltaTime)**2 + \
            app.player.vx * app.deltaTime + app.player.x
        
        app.timeLast = app.timeNow
    
def redrawAll(app):
    if app.exlodeShip:
        pass
    drawPolygon( #! Player class points used in polygon 
        app.player.x, app.player.y, 
        app.player.x + 20, app.player.y + 10, 
        app.player.x + 25, app.player.y + 30,
        app.player.x + 20, app.player.y + 40, 
        app.player.x + 25, app.player.y + 50, 
        app.player.x + 20, app.player.y + 50, 
        app.player.x + 15, app.player.y + 40, 
        app.player.x + 5, app.player.y + 40, 
        app.player.x + 10, app.player.y + 50, 
        app.player.x - 10, app.player.y + 50, 
        app.player.x - 5, app.player.y + 40, 
        app.player.x - 15, app.player.y + 40, 
        app.player.x - 20, app.player.y + 50, 
        app.player.x - 25, app.player.y + 50, 
        app.player.x - 20, app.player.y + 40, 
        app.player.x - 25, app.player.y + 30, 
        app.player.x - 20, app.player.y + 10,
        
        rotateAngle=app.player.angle + 90,
        fill='red' if app.thrustOn and not app.stopMoving else 'blue',
        visible=app.player.visible
    )
    #! hardcoded stand in for surface of planet to test collision 
    drawPolygon(500, 400, 700, 400, 550, 450, fill='white')
    #? labels for displaying velocity information 
    drawLabel(f'Horizontal Velocity: {int(app.player.vx // 10)}', 1300, 50, fill='white', 
                font='monospace', size=15)
    drawLabel(f'Vertical Velocity: {int(app.player.vy // 10)}', 1300, 70, fill='white', 
                font='monospace', size=15)

def onKeyHold(app, keys):   
    if 'right' in keys and not app.stopMoving:
        app.player.angle += 3
    if 'left' in keys and not app.stopMoving:
        app.player.angle -= 3
    if 'l' in keys: #! increase gravity to test higher speed collision 
        app.gravityCurrent = 100
    
def onKeyPress(app, key):
    if key == 'space':
        app.thrustOn = True
    if key == 'r':
        resetGame(app)

def onKeyRelease(app, key):
    if key == 'space':
        app.thrustOn = False

def onMouseMove(app, mouseX, mouseY): #? dont need this, used to figure out x,y coords
    print(mouseX, mouseY)

def distance(x1, y1, x2, y2):
    return  ((y2 - y1)**2 + (x2 - x1)**2)**.5   

#? form of herons formula, find area of triangle with only side lengths
def triangleArea(x1, y1, x2, y2, x3, y3):
   return abs((x1 * (y2 - y3) + x2 * (y3 - y1)
                + x3 * (y1 - y2)) / 2)

#! check if a point is inside a triangle 
def ContainPoint(x, y, x1, y1, x2, y2, x3, y3):
    
    triOriginal = triangleArea(x1, y1, x2, y2, x3, y3)
    triA = triangleArea(x, y, x1, y1, x2, y2)
    triB = triangleArea(x, y, x2, y2, x3, y3)
    triC = triangleArea(x, y, x3, y3, x1, y1)

    return triOriginal == triA + triB + triC

#! checking if any points in the player polygon are contained by the ground polygon (triangles rn)
def checkGroundCollisions(app):
    for x, y in app.landerPoints:
        if ContainPoint(x, y, 500, 400, 700, 400, 550, 450):
            app.stopMoving = True
            app.player.visible = False
            app.player.y -= .73

def makePointsIntoTriangle(app, x1, y1, x2, y2):
    x3 = min(x1, x2) + 1
    y3 = min(y1, y2) + 1

#? Set aniamtion that runs when ship crashes, lands on not flat or too fast
def explode(app):
    pass


def main():
    runApp()
    
if __name__ == '__main__':
    main()
